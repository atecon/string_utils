<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="string_utils" no-data-ok="true" minver="2018a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.1</version>
<date>2019-12-17</date>
<description>Helper functions for string operations</description>
<tags>C81</tags>
<help>
Help text for the string_utils.gfn package by Artur Tarassow.

Email: atecon@posteo.de (please ask questions and report bugs on the gretl mailing list if possible).

Source code and tests: https://github.com/atecon/string_utils

This package is a collection of helper functions for various operations of string variables and string arrays which are not covered by gretl's built-in methods (yet).


Public functions:
-----------------

strdrop():
Drop a specific string 'drop_str' from string array 'S'. String 'drop_str' may occur multiple times.
----------
Arguments:
S 		- string array
drop_str 	- string, pattern of string value to be droppped from S

Return:
Return string array excluding string 'drop_str' if present in S. If 'drop_str' is not present, the original array 'S' is returned instead. If string array 'S' has length zero, an empty array is returned.


strpos():
Determine the positions of a string in string array S.
----------
Arguments:
S 				- string array
search_pattern	- string, pattern of string entry to be searched in S

Return:
Returns the positional entr(y)ies of string 'search_pattern' in a column vector if present in string array 'S', otherwise a 1x1 zero-matrix. If either string array 'S' or string 'search_pattern' are of length zero, a 1x1 zero-matrix is returned.


struniq():
Get the unique string values of string array S.
----------
Arguments:
S 		- string array

Return:
Array containing the distinct elements of array S not sorted but in their order of appearance. If string array 'S' has length zero or at least one string element is of length zero, an empty string array is returned.


strrepl():
Copy string n-times into a string array of length n.
----------
Arguments:
str		- string
n 	 	- int

Return:
Array containing string 'str' n-times. Also works for an empty string 'str'.


msortby_rowlabels():
Sort rows of matrix X by re-ordering row-labels of X by string array 'rowlabels_new'.
----------
Arguments:
X				- matrix, must include row-labels set by rnameset()
rowlabels_new	- string array, re-order X' row-labels by this string

Return:
Matrix with sorted rows of X by 'rowlabels_new'. X must have row-labels. Also all elements in 'rowlabels_new' must be present in X' row-labels too, otherwise a 1x1 zero-matrix is returned.



Changelog:
- 0.1, December 2019:
    initial release
</help>
<gretl-function name="strdrop" type="strings">
 <params count="2">
  <param name="S" type="strings" const="true"/>
  <param name="drop_str" type="string" const="true"/>
 </params>
<code>/* Drop a specific string from string array. String may occur multiple times. */
strings ret = array(0)
if strlen(drop_str) == 0
  return S
elif nelem(S) == 0
  return ret
else
  loop i=1..nelem(S) -q
    if S[i] != drop_str
      ret += S[i]
    endif
  endloop
endif
return ret
</code>
</gretl-function>
<gretl-function name="strpos" type="matrix">
 <params count="2">
  <param name="S" type="strings" const="true">
<description>Array of strings</description>
  </param>
  <param name="search_pattern" type="string" const="true">
<description>String being searched for in S</description>
  </param>
 </params>
<code># Returns the positional entries of string in S in a column vector
# if S contains the string, 0 otherwise.
matrix ret = {}
if strlen(search_pattern) &amp;&amp; nelem(S)
  loop i=1..nelem(S) -q
    if S[i] == search_pattern
      ret |= $i
    endif
  endloop
  if rows(ret) &gt; 0
    return ret
  else
    return {0}
  endif
else
  return {0}
endif
</code>
</gretl-function>
<gretl-function name="struniq" type="strings">
 <params count="1">
  <param name="S" type="strings" const="true"/>
 </params>
<code>/* Returns an array containing the distinct elements
of S not sorted but in their order of appearance. Fails in case
at least one element is an empty string. */
strings suniq = array(0)
scalar error = 0
if nelem(S) &amp;&amp; strlen(S[1])
  strings suniq = defarray(S[1])
  loop i=2..nelem(S) -q
    if strlen(S[i]) == 0
      error++
      break
    endif
    if sum( strpos(suniq, S[i]) ) == 0
      suniq += S[i]
    endif
  endloop
  if error
    #printf &quot;\nWarning: At least one element in string array has length zero. Not allowed.\n&quot;
    return array(0)
  endif
endif
return suniq
</code>
</gretl-function>
<gretl-function name="strrepl" type="strings">
 <params count="2">
  <param name="str" type="string" const="true"/>
  <param name="n" type="int" min="1" const="true"/>
 </params>
<code>/* Construct string array holding a constant string n times. */
strings S = array(n)
loop i=1..n -q
  S[i] = str
endloop
return S
</code>
</gretl-function>
<gretl-function name="msortby_rowlabels" type="matrix">
 <params count="2">
  <param name="X" type="matrix" const="true"/>
  <param name="rowlabels_new" type="strings">
<description>String array to be re-ordered</description>
  </param>
 </params>
<code>/* Read out current string array of row-labels of matrix X. Re-order
rows of X according to string array 'rowlabels_new'.
The array 'rowlabels_new' must be of the same length as X has rows.
All elements in 'rowlabels_new' must also be included in X' row
names, otherwise a 1x1 zero-matrix is returned. */
matrix ret = {0}
strings rnames = rnameget(X)
if !nelem(rowlabels_new) || !nelem(rnames)
  return ret
endif
if (nelem(struniq(rowlabels_new)) != nelem(rowlabels_new))
  return ret
endif
if nelem(rowlabels_new) != rows(X)
  return ret
endif
matrix ret = zeros(rows(X), cols(X))
loop i=1..nelem(rowlabels_new) -q
  scalar pos = strpos(rnames, rowlabels_new[i])
  if pos != 0
    ret[pos,] = X[i,]
  else
    return {0}
  endif
endloop
rnameset(ret, rowlabels_new)
return ret
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include string_utils.gfn


strings S = defarray(&quot;A&quot;, &quot;B&quot;)
string drop = &quot;B&quot;
eval strdrop(S, drop)

strings S = defarray(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;B&quot;)
string search = &quot;B&quot;
eval strpos(S, search)

strings S = defarray(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;B&quot;)
eval struniq(S)

string str = &quot;AB&quot;
eval strrepl(str, 3)

matrix m = mshape(seq(1,4),2,2)
rnameset(m, &quot;R1 R2&quot;)
strings rnames_new = defarray(&quot;R2&quot;, &quot;R1&quot;)
eval msortby_rowlabels(m, rnames_new)
</sample-script>
</gretl-function-package>
</gretl-functions>
