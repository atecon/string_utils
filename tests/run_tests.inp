set verbose off
clear

include "./src/string_utils.inp" --force
include assertion.gfn


function void test_strprog (void)
    print "Start with strprog()"

    string pre = ""
    string post = ""
    matrix x = {}
    strings S = strprog(x)
    assert_equal_num(nelem(S), 0)
    
    string pre = ""
    string post = ""
    matrix x = seq(1,3)
    strings S = strprog(x)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "1")
    assert_equal_str(S[2], "2")
    assert_equal_str(S[3], "3")

    string pre = ""
    string post = ""
    matrix x = seq(1,3)
    strings S = strprog(x, pre, post)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "1")
    assert_equal_str(S[2], "2")
    assert_equal_str(S[3], "3")

    string pre = ""
    string post = ""
    matrix x = seq(1,3)
    x[1] = NA
    strings S = strprog(x)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "NA")
    assert_equal_str(S[2], "2")
    assert_equal_str(S[3], "3")

    string pre = "mat["
    string post = ""
    matrix x = seq(1,3)
    x[1] = NA
    strings S = strprog(x, pre)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "mat[NA")
    assert_equal_str(S[2], "mat[2")
    assert_equal_str(S[3], "mat[3")

    string pre = "mat["
    string post = "&"
    matrix x = seq(1,3)
    x[1] = NA
    strings S = strprog(x, pre, post)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "mat[NA&")
    assert_equal_str(S[2], "mat[2&")
    assert_equal_str(S[3], "mat[3&")
    
    string pre = ""
    string post = "987"
    matrix x = seq(1,3)
    x[1] = NA
    strings S = strprog(x, , post)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "NA987")
    assert_equal_str(S[2], "2987")
    assert_equal_str(S[3], "3987")

end function


function void test_strdrop (void)
    print "Start with strdrop()"
    
    strings S = defarray("ABU Kko*&(", "C?`=/$%&")
    string sdrop = "C?`=/$%&"
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 1)
    assert_equal_str(S[1], "ABU Kko*&(")
    
    strings S = defarray("ABU Kko*&(", "C?`=/$%&")
    string sdrop = "ABU Kko*&("
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 1)
    assert_equal_str(S[1], "C?`=/$%&")

    strings S = defarray("A", "AB", "AB")
    string sdrop = "A"
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 2)
    assert_equal_str(S[1], "AB")
    assert_equal_str(S[2], "AB")

    strings S = defarray("A", "AB", "AB")
    string sdrop = "AB"
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 1)
    assert_equal_str(S[1], "A")

    strings S = defarray("A", "B", "C")
    string sdrop = "D"
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "A")
    assert_equal_str(S[2], "B")
    assert_equal_str(S[3], "C")

    strings S = defarray("A", "B", "C")
    string sdrop = ""
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "A")
    assert_equal_str(S[2], "B")
    assert_equal_str(S[3], "C")
    
    strings S = array(0)
    string sdrop = ""
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 0)

    strings S = array(0)
    string sdrop = "A"
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 0)
end function


function void test_strpos (void)
    print "Start with strpos()"
    
    strings S = defarray("ABU Kko*&(", "C ?`=/$%&", "", " ")
    string search = "ABU Kko*&("
    scalar pos = strpos(S, search)
    assert_equal_num(pos, 1)

    string search = "C ?`=/$%&"
    scalar pos = strpos(S, search)
    assert_equal_num(pos, 2)

    string search = ""
    matrix mpos = strpos(S, search)
    assert_equal_num(nelem(mpos), 0)
        
    string search = " "
    scalar pos = strpos(S, search)
    assert_equal_num(pos, 4)
    
    string search = "ABC"
    matrix mpos = strpos(S, search)
    assert_equal_num(nelem(mpos), 0)

    strings S = defarray("A", "B", "A")
    string search = "A"
    matrix mpos = strpos(S, search)
    assert_equal_num(mpos[1], 1)
    assert_equal_num(mpos[2], 3)
    
    strings S = array(0)
    string search = ""
    matrix mpos = strpos(S, search)
    assert_equal_num(nelem(mpos), 0)
end function


function void test_struniq (void)
    print "Start with struniq()"
    
    strings S = defarray("R1", "R2", "R3")
    strings Suniq = struniq(S)
    assert_equal_num(nelem(Suniq), 3)
    assert_equal_str(Suniq[1], "R1")
    assert_equal_str(Suniq[2], "R2")
    assert_equal_str(Suniq[3], "R3")

    strings S = defarray("R1", "R2", "R3", "R-1", "R2", "A", "A", "C")
    strings Suniq = struniq(S)
    assert_equal_num(nelem(Suniq), 6)
    assert_equal_str(Suniq[1], "R1")
    assert_equal_str(Suniq[2], "R2")
    assert_equal_str(Suniq[3], "R3")
    assert_equal_str(Suniq[4], "R-1")
    assert_equal_str(Suniq[5], "A")
    assert_equal_str(Suniq[6], "C")

    strings S = defarray("R1", "R2", "")
    strings Suniq = struniq(S)
    assert_false(nelem(Suniq))

    strings S = defarray("R1", " ", "")
    strings Suniq = struniq(S)
    assert_false(nelem(Suniq))
end function


function void test_strrepl (void)
    print "Start with strrepl()"
    
    string str = "ABC DH7*!_"
    strings S = strrepl(str, 3)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "ABC DH7*!_")
    assert_equal_str(S[2], "ABC DH7*!_")
    assert_equal_str(S[3], "ABC DH7*!_")
    
    string str = ""
    strings S = strrepl(str, 3)
    assert_equal_num(nelem(S), 3)
end function


function void test_msortby_rowlabels (void)
    print "Start with msortby_rowlabels()"
    
    matrix M = mshape(seq(1,9), 3, 3)
    strings Snew = defarray("C", "A", "B")
    strings S = defarray("A", "B", "C")
    matrix m = msortby_rowlabels(M, Snew)
    assert_false(nelem(m))

    rnameset(M, S)
    matrix m = msortby_rowlabels(M, Snew)
    strings row_names = rnameget(m)
    assert_equal_num(nelem(row_names), 3)
    assert_equal_str(row_names[1], "C")
    assert_equal_str(row_names[2], "A")
    assert_equal_str(row_names[3], "B")

    assert_equal_num(sumr(m)[1], 15)
    assert_equal_num(sumr(m)[2], 18)
    assert_equal_num(sumr(m)[3], 12)
    
    strings Snew = defarray("C", "A", "B")
    strings S = defarray("A ", "B", "C")
    rnameset(M, S)
    matrix m = msortby_rowlabels(M, Snew)
    assert_false(nelem(m))
    
    strings Snew = defarray("C", "A", "D")
    strings S = defarray("A", "B", "C")
    rnameset(M, S)
    matrix m = msortby_rowlabels(M, Snew)
    assert_false(nelem(m))

    strings Snew = defarray("783jdikd_", "A", "B")
    strings S = defarray("A", "B", "783jdikd_")
    rnameset(M, S)
    matrix m = msortby_rowlabels(M, Snew)
    strings row_names = rnameget(m)
    assert_equal_num(nelem(row_names), 3)
    assert_equal_str(row_names[1], "783jdikd_")
    assert_equal_str(row_names[2], "A")
    assert_equal_str(row_names[3], "B")
    assert_equal_num(sumr(m)[1], 15)
    assert_equal_num(sumr(m)[2], 18)
    assert_equal_num(sumr(m)[3], 12)
end function

test_strprog()
test_strdrop()
test_strpos()
test_struniq()
test_strrepl()
test_msortby_rowlabels()

# TODO: Not yet implemented -- works only if "to_num = 1"	
/*
   nulldata 4
   strings dates = defarray("2019-01-01", "2019-01-02", "20190103", "2019/01/02")
   series Date = time
   stringify(Date, dates)
   print Date -o

   series NumDate = replace_series_string_values(Date, "\W", "")		# '\W' replace all non-numeric chars
   print Date NumDate -o
*/




printf "\nInfo: All tests passed.\n"
