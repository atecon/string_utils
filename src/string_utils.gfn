<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="string_utils" no-data-ok="true" minver="2020b">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.5</version>
<date>2022-04-27</date>
<description>Helper functions for string operations</description>
<tags>C81</tags>
<help>
This package is a collection of helper functions for various operations of
string variables and string arrays which are not covered by gretl's built-in
methods (yet).

Please ask questions and report bugs on the gretl mailing list if possible.
Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/string_utils



Public functions:
-----------------

camelcase(string input):
========================
Camel-case is a capitalization of the first letter (and the remaining letters
are lowercase) before concatenating each of the space-separated words to a
single word. Words of the 'input' variable are expected to be separated by space.
Eventual spaces at the beginning or end of the string are removed before return.
----------
Arguments:
input   - string, Input string

Return:
String in camel-case format.


capitalize(string input):
=========================
Convert first letter of a string to uppercase and other letters to lowercase.
Eventual spaces will not be removed before return.
----------
Arguments:
input   - string, String to be capitalized

Return:
Returns capitalized string.


find(const string search, const string find):
=============================================
Finds a substring in a string and returns the index of the substring. Eventual
spaces are not ignored. If 'find' exists multiple times, the position of its first
occurrence is returned.
----------
Arguments:
search   - string, String to be searched
find     - string, String to find

Return:
Position of the 'find' string within the search string. In case, 'find' is not
found in the 'search string, the scalar value 0 is returned.


msortby_rowlabels(const matrix X, const strings rowlabels_new):
===============================================================
Sort rows of matrix X by re-ordering row-labels of X by string array
'rowlabels_new'.
----------
Arguments:
X               - matrix, must include row-labels
rowlabels_new   - string array, re-order X' row-labels by this string

Return:
Matrix with sorted rows of X by 'rowlabels_new'. X must have row-labels.
Also all elements in 'rowlabels_new' must be present in X' row-labels too,
otherwise an empty matrix is returned (can be checked by &lt;nelem(matrix)&gt;).


snakecase(string input):
========================
The snakecase is a style replacing spaces by underscores, and transforming all
letters to lowercase. Words of the 'input' variable are expected to be separated
by space. Eventual spaces at the beginning or end of the string are removed
before return.
----------
Arguments:
input   - string, Input string

Return:
String in snake-case format.


strdrop(strings S, string pattern):
===================================
Drop a specific string pattern from string array 'S'. String 'pattern'
may occur multiple times.
----------
Arguments:
S           - string array, Input
pattern     - string, Pattern of string value to be dropped from S

Return:
Return string array excluding string 'pattern' if present in S. If 'drop_str'
is not present, the original array 'S' is returned instead. If string
array 'S' has length zero, an empty array is returned.


strflatten(string S, const string delimiter[null]):
===================================================
Flatten an array of strings to a string separated by some delimiter.
----------
Arguments:
S           - string array, Input string array
delimiter   - string, Delimiter (optional, default: &quot;,&quot;)

Return:
String value separating each array item by some delimiter.
NOTE: For simply flattening a string array, use the built-in gretl
function flatten which holds the strings in S, arranged one per line
by default.


strrepl(const string S, const int n[1::]):
==========================================
Copy string n-times into a string array of length n.
----------
Arguments:
S           - string, String to be repeated 'n' times
n           - int, Number of times to repeat 'S'

Return:
Array containing string 'S' n-times. Also works for an empty string 'S'.


strsandwich(matrix x, const string prefix[null], const string suffix[null]):
=======================================================================
Construct a string array. To each numerical value of &quot;x&quot;, concatenate a
string prefix and a suffix.
----------
Arguments:
x           - matrix, holding numerical values
pre         - string, prefix to add (optional, default = &quot;&quot;)
post        - string, suffix to add (optional, default = &quot;&quot;)

Return:
Array of length n=rows(vec(x)). Each string is a combination of the
prefix, the i-th numerical value of &quot;x&quot; and the suffix.


strstarts(const string target, const string pattern):
====================================================
Check whether 'target' starts with 'pattern'.
----------
Arguments:
target      - string, String being searched
pattern     - string, Pattern to search for

Return:
TRUE if 'target' starts with 'pattern', otherwise FALSE.


strends(const string target, const string pattern):
==================================================
Check whether 'target' ends with 'pattern'.
----------
Arguments:
target      - string, String being searched
pattern     - string, Pattern to search for

Return:
TRUE if 'target' ends with 'pattern', otherwise FALSE.


struniq(const strings S):
=========================
Get the unique string values of string array S.
----------
Arguments:
S           - string array, Array to process

Return:
Array containing the distinct elements of array S not sorted but in their
order of appearance. If string array 'S' has length zero or at least one
string element is of length zero, an empty string array is returned.


titlecase(string input):
========================
The titlecase is a capitalization style used for titles so that the first letter
of each word is uppercase and the remaining letters are lowercase. Words are
expected to be separated by space. Space at the beginning or end of the string
are removed.
----------
Arguments:
input   - string, Input string

Return:
&quot;titlelized&quot; string.


Changelog:
- 0.5, April 2022:
    + Add new functions capitalize(), camelcase(), snakecase(), titlecase() and
    find()
- 0.4, January 2021:
    + Add new functions strstarts() and strends()
    + Change minimum version required from 2019c to 2020b.
- 0.3, December 2020:
    + Add new strflatten() function
    + Remove deprecated function strpos() as reported in version 0.21 - this
      function is superseded by gretl's built-in function instrings()
      which is available since gretl 2020a
    + Change minimum version required from 2018a to 2019c.
- 0.21, Januar 2020:
    + strpos() function also accepts and searches for empty string
      (length zero) in array S.
    + drop unnecessary checks in strpos()
    + add new function strsandwich()
- 0.2, December 2019:
    + add new function strprog()
- 0.1, December 2019:
    + initial release
</help>
<gretl-function name="capitalize" type="string">
 <params count="1">
  <param name="input" type="string"/>
 </params>
<code>/* Convert first letter to uppercase and other letters to lowercase.
return: string, Capitalized */
input = tolower(input)
if nelem(input) == 0
  return input
endif
input = nelem(input) == 1 ? toupper(input[1]) : toupper(input[1]) ~ input[2:]
return input
</code>
</gretl-function>
<gretl-function name="camelcase" type="string">
 <params count="1">
  <param name="input" type="string"/>
 </params>
<code>/* The titlecase is a capitalization style used for titles so that the first
letter of each word is uppercase and the remaining letters are lowercase.
return: string, titlecase */
return titlecase(input, FALSE)
</code>
</gretl-function>
<gretl-function name="find" type="scalar">
 <params count="2">
  <param name="search" type="string" const="true"/>
  <param name="find" type="string" const="true"/>
 </params>
<code>/* Finds a substring in a string and returns the index of the substring.
return: scalar, Position of the string. If 'find' is not found, return 0 value.
Eventual spaces are not ignored. */
if !nelem(search) || !nelem(find)
  print &quot;Warning: Both the searched string and the find string must be at least of length one.&quot;
  return 0
endif
string match = strstr(search, find)
scalar ret = 0
if match != &quot;&quot;
  ret = 1 + strlen(search) - strlen(match)
endif
return ret
</code>
</gretl-function>
<gretl-function name="msortby_rowlabels" type="matrix">
 <params count="2">
  <param name="X" type="matrix" const="true"/>
  <param name="rowlabels_new" type="strings">
<description>String array to be re-ordered</description>
  </param>
 </params>
<code>/* Read out current string array of row-labels of matrix X. Re-order
rows of X according to string array 'rowlabels_new'.
The array 'rowlabels_new' must be of the same length as X has rows.
All elements in 'rowlabels_new' must also be included in X' row
names, otherwise a 1x1 zero-matrix is returned. */
matrix ret = {}
strings rnames = rnameget(X)
if !nelem(rowlabels_new) || !nelem(rnames)
  return ret
endif
if (nelem(struniq(rowlabels_new)) != nelem(rowlabels_new))
  return ret
endif
if nelem(rowlabels_new) != rows(X)
  return ret
endif
matrix ret = zeros(rows(X), cols(X))
loop i=1..nelem(rowlabels_new) -q
  if nelem(strpos(rnames, rowlabels_new[i], 0)) &gt; 0
    scalar pos = strpos(rnames, rowlabels_new[i], 0)
    ret[pos,] = X[i,]
  else
    return {}
  endif
endloop
rnameset(ret, rowlabels_new)
return ret
</code>
</gretl-function>
<gretl-function name="snakecase" type="string">
 <params count="1">
  <param name="input" type="string" const="true"/>
 </params>
<code>/* The snakecase is a style replacing spaces by underscores, and all letters
to lowercase.
return: string, Formatted in snakecase style */
strings Inputs = strsplit(input, &quot; &quot;)
string ret
loop foreach i Inputs
  ret += sprintf(&quot;%s&quot;, tolower(&quot;$i&quot;))
  if i &lt; nelem(Inputs)
    ret += &quot;_&quot;
  endif
endloop
return ret
</code>
</gretl-function>
<gretl-function name="strdrop" type="strings">
 <params count="2">
  <param name="S" type="strings" const="true"/>
  <param name="pattern" type="string" const="true"/>
 </params>
<code>/* Drop a specific string from string array. String may occur multiple times. */
strings ret = array(0)
if strlen(pattern) == 0
  return S
elif nelem(S) == 0
  return ret
else
  loop i=1..nelem(S) -q
    if S[i] != pattern
      ret += S[i]
    endif
  endloop
endif
return ret
</code>
</gretl-function>
<gretl-function name="strflatten" type="string">
 <params count="2">
  <param name="S" type="strings" const="true"/>
  <param name="delimiter" type="string" optional="true" const="true"/>
 </params>
<code>/* Flatten string array to string. */
if exists(delimiter) == 0
  delimiter = &quot;,&quot;
endif
return regsub(flatten(S), &quot;\n&quot;, delimiter)
</code>
</gretl-function>
<gretl-function name="strrepl" type="strings">
 <params count="2">
  <param name="str" type="string" const="true"/>
  <param name="n" type="int" min="1" const="true"/>
 </params>
<code>/* Construct string array holding a constant string n times. */
strings S = array(n)
loop i=1..n -q
  S[i] = str
endloop
return S
</code>
</gretl-function>
<gretl-function name="strsandwich" type="strings">
 <params count="3">
  <param name="x" type="matrix"/>
  <param name="pre" type="string" optional="true" const="true"/>
  <param name="post" type="string" optional="true" const="true"/>
 </params>
<code>/* Construct a string array where to each numerical value of x
a string prefix 'pre' and a suffix 'post' is concatenated.
Proposed by Riccardo &quot;Jack&quot; Lucchetti. */
matrix x = vec(x)
scalar n = rows(x)
strings ret = array(n)
if !nelem(x)
  return ret
endif
if !exists(pre)
  pre = &quot;&quot;
endif
if !exists(post)
  post = &quot;&quot;
endif
loop i=1..n -q
  ret[i] = sprintf(&quot;%s%d%s&quot;, pre, x[i], post)
endloop
return ret
</code>
</gretl-function>
<gretl-function name="strpos" type="matrix">
 <params count="3">
  <param name="S" type="strings" const="true">
<description>Array of strings</description>
  </param>
  <param name="search_pattern" type="string" const="true">
<description>String being searched for in S</description>
  </param>
  <param name="print_warning" type="bool" default="1" const="true"/>
 </params>
<code>/* Returns the positional entries of string in S in a column vector */
matrix ret = {}
loop i=1..nelem(S) -q
  if S[i] == search_pattern
    ret |= $i
  endif
endloop
return ret
</code>
</gretl-function>
<gretl-function name="strstarts" type="scalar">
 <params count="2">
  <param name="target" type="string" const="true">
<description>Text being searched</description>
  </param>
  <param name="pattern" type="string" const="true">
<description>Prefix to be searched</description>
  </param>
 </params>
<code>/* Check whether 'target' starts with the pattern 'pattern'.
Return TRUE if 'target' starts with 'pattern', otherwise FALSE. */
if nelem(target) &lt; nelem(pattern)
  printf &quot;\nWarning: 'pattern' cannot be longer than 'target'.\n&quot;
  return FALSE
endif
string target_starts_with = substr(target, 1, nelem(pattern))
if target_starts_with == pattern
  return TRUE
else
  return FALSE
endif
</code>
</gretl-function>
<gretl-function name="strends" type="scalar">
 <params count="2">
  <param name="target" type="string" const="true">
<description>Text being searched</description>
  </param>
  <param name="pattern" type="string" const="true">
<description>Suffix to be searched</description>
  </param>
 </params>
<code>/* Check whether 'target' ends with the pattern 'pattern'.
Return TRUE if 'target' ends with 'pattern', otherwise FALSE. */
if nelem(target) &lt; nelem(pattern)
  printf &quot;\nWarning: 'pattern' cannot be longer than 'target'.\n&quot;
  return FALSE
endif
scalar n_chars_target = nelem(target)
scalar n_chars_pattern = nelem(pattern)
scalar start = 1 + n_chars_target - n_chars_pattern
scalar ende = n_chars_target
string target_ends_with = substr(target, start, ende)
if target_ends_with == pattern
  return TRUE
else
  return FALSE
endif
</code>
</gretl-function>
<gretl-function name="struniq" type="strings">
 <params count="1">
  <param name="S" type="strings" const="true"/>
 </params>
<code>/* Returns an array containing the distinct elements
of S not sorted but in their order of appearance. */
strings suniq = array(0)
scalar error = 0
if nelem(S) &amp;&amp; strlen(S[1])
  strings suniq = defarray(S[1])
  loop i=2..nelem(S) -q
    if strlen(S[i]) == 0
      error++
      break
    endif
    if nelem( strpos(suniq, S[i], 0) ) == 0
      suniq += S[i]
    endif
  endloop
  if error
    #printf &quot;\nWarning: At least one element in string array has length zero. Not allowed.\n&quot;
    return array(0)
  endif
endif
return suniq
</code>
</gretl-function>
<gretl-function name="titlecase" type="string">
 <params count="2">
  <param name="input" type="string" const="true"/>
  <param name="add_space" type="bool" default="1" const="true"/>
 </params>
<code>/* The titlecase is a capitalization style used for titles so that the first
letter of each word is uppercase and the remaining letters are lowercase.
return: string, titlecase */
strings Inputs = strsplit(input, &quot; &quot;)
string ret
loop foreach i Inputs
  ret += sprintf(&quot;%s&quot;, capitalize(&quot;$i&quot;))
  if i &lt; nelem(Inputs) &amp;&amp; add_space == TRUE
    ret += &quot; &quot;
  endif
endloop
return ret
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include string_utils.gfn


strings S = defarray(&quot;A&quot;, &quot;B&quot;)
string drop = &quot;B&quot;
eval strdrop(S, drop)

strings S = defarray(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;B&quot;)
string search = &quot;B&quot;
eval strpos(S, search)

strings S = defarray(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;B&quot;)
eval struniq(S)

string str = &quot;AB&quot;
eval strrepl(str, 3)

matrix m = mshape(seq(1,4),2,2)
rnameset(m, &quot;R1 R2&quot;)
strings rnames_new = defarray(&quot;R2&quot;, &quot;R1&quot;)
eval msortby_rowlabels(m, rnames_new)

eval strsandwich(seq(2,4), &quot;beta_&quot;)
eval strsandwich(seq(1,2), &quot;a[&quot; , &quot;]&quot;)

strings S1 = defarray(&quot;A&quot;, &quot;B&quot;)
strings S2 = defarray(&quot;A&quot;, &quot;B&quot;, &quot;; &quot;)
eval strflatten(S1)
eval strflatten(S2)


string target = &quot;ABCdev&quot;
string prefix1 = &quot;ABC&quot;
string prefix2 = &quot;CBA&quot;
eval strstarts(target, prefix1)
eval strstarts(target, prefix2)

string target = &quot;ABCdev&quot;
string suffix1 = &quot;dev&quot;
string suffix2 = &quot;Cved&quot;
eval strends(target, suffix1)
eval strends(target, suffix2)


# Capitalize first letter
string input = &quot;abc def&quot;
eval capitalize(input)

# &quot;Titlelize&quot; string
string input = &quot;abc def&quot;
eval titlecase(input)

# Camelcase string
string input = &quot;abc def&quot;
eval camelcase(input)

# Snakecase string
string input = &quot;gretl Loves SNAKE caSe&quot;
eval snakecase(input)


# Find position of a substring within a string
string search = &quot;abc def&quot;
string find = &quot;e&quot;
eval find(search, find)
</sample-script>
</gretl-function-package>
</gretl-functions>
