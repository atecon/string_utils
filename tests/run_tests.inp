set verbose off
clear
set assert stop

include "./src/string_utils.inp" --force
include assertion.gfn


function void test_strsandwich (void)
    print "Start with strsandwich()"

    string pre = ""
    string post = ""
    matrix x = {}
    strings S = strsandwich(x)
    assert_equal_num(nelem(S), 0)

    string pre = ""
    string post = ""
    matrix x = seq(1,3)
    strings S = strsandwich(x)
    assert_equal_num(nelem(S), 3)
    assert(S[1] == "1")
    assert(S[2] == "2")
    assert(S[3] == "3")

    string pre = ""
    string post = ""
    matrix x = seq(1,3)
    strings S = strsandwich(x, pre, post)
    assert_equal_num(nelem(S), 3)
    assert(S[1] == "1")
    assert(S[2] == "2")
    assert(S[3] == "3")

    string pre = ""
    string post = ""
    matrix x = seq(1,3)
    x[1] = NA
    strings S = strsandwich(x)
    assert_equal_num(nelem(S), 3)
    assert(S[1] == "NA")
    assert(S[2] == "2")
    assert(S[3] == "3")

    string pre = "mat["
    string post = ""
    matrix x = seq(1,3)
    x[1] = NA
    strings S = strsandwich(x, pre)
    assert_equal_num(nelem(S), 3)
    assert(S[1] == "mat[NA")
    assert(S[2] == "mat[2")
    assert(S[3] == "mat[3")

    string pre = "mat["
    string post = "&"
    matrix x = seq(1,3)
    x[1] = NA
    strings S = strsandwich(x, pre, post)
    assert_equal_num(nelem(S), 3)
    assert(S[1] == "mat[NA&")
    assert(S[2] == "mat[2&")
    assert(S[3] == "mat[3&")

    string pre = ""
    string post = "987"
    matrix x = seq(1,3)
    x[1] = NA
    strings S = strsandwich(x, , post)
    assert_equal_num(nelem(S), 3)
    assert(S[1] == "NA987")
    assert(S[2] == "2987")
    assert(S[3] == "3987")
end function


function void test_strdrop (void)
    print "Start with strdrop()"

    strings S = defarray("ABU Kko*&(", "C?`=/$%&")
    string sdrop = "C?`=/$%&"
    strings S = strdrop(S, sdrop)
    assert(nelem(S) == 1)
    assert(S[1] == "ABU Kko*&(")

    strings S = defarray("ABU Kko*&(", "C?`=/$%&")
    string sdrop = "ABU Kko*&("
    strings S = strdrop(S, sdrop)
    assert(nelem(S) == 1)
    assert(S[1] == "C?`=/$%&")

    strings S = defarray("A", "AB", "AB")
    string sdrop = "A"
    strings S = strdrop(S, sdrop)
    assert(nelem(S) == 2)
    assert(S[1] == "AB")
    assert(S[2] == "AB")

    strings S = defarray("A", "AB", "AB")
    string sdrop = "AB"
    strings S = strdrop(S, sdrop)
    assert(nelem(S) == 1)
    assert(S[1] == "A")

    strings S = defarray("A", "B", "C")
    string sdrop = "D"
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "A")
    assert_equal_str(S[2], "B")
    assert_equal_str(S[3], "C")

    strings S = defarray("A", "B", "C")
    string sdrop = ""
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "A")
    assert_equal_str(S[2], "B")
    assert_equal_str(S[3], "C")

    strings S = array(0)
    string sdrop = ""
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 0)

    strings S = array(0)
    string sdrop = "A"
    strings S = strdrop(S, sdrop)
    assert_equal_num(nelem(S), 0)
end function



bundles Params = null
Params = Params + _(input = defarray(""),
                    do_sort = FALSE,
                    expected = defarray(""))
Params = Params + _(input = defarray("ZZZ"),
                    do_sort = FALSE,
                    expected = defarray("ZZZ"))
Params = Params + _(input = defarray("NZ", "AUS", "SAF", "AUS", "ENG", "SAF",
                                     "NZ", "NZ", "SAF", "SAF"),
                    do_sort = FALSE,
                    expected = defarray("NZ", "AUS", "SAF", "ENG"))
Params = Params + _(input = defarray("R1", "R2", "R3"),
                    do_sort = FALSE,
                    expected = defarray("R1", "R2", "R3"))
Params = Params + _(input = defarray("R1", "R2", "R3", "R-1", "R2", "A", "A",
                                     "C"),
                    do_sort = FALSE,
                    expected = defarray("R1", "R2", "R3", "R-1", "A", "C"))
Params = Params + _(input = defarray("R2", "R1", ""),
                    do_sort = FALSE,
                    expected = defarray("R2", "R1", ""))

function void test_struniq_noordering (const bundles P)
    print "Start testing function struniq() without ordering."

    loop foreach i P
        # Given
        strings expected = P[i].expected
        # When
        strings actual = struniq(P[i].input, P[i].do_sort)

        # Then
        assert(nelem(actual) == nelem(expected))
        loop foreach j expected
            assert(actual[j] == "$j")
        endloop
    endloop
end function
test_struniq_noordering(Params)



bundles Params = null
Params = Params + _(input = defarray(""),
                    do_sort = TRUE,
                    expected = defarray(""))
Params = Params + _(input = defarray("NZ", "AUS", "SAF", "AUS", "ENG", "SAF",
                                     "NZ", "NZ", "SAF", "SAF"),
                    do_sort = TRUE,
                    expected = defarray("AUS", "ENG", "NZ", "SAF"))
Params = Params + _(input = defarray("R1", "R2", "R3"),
                    do_sort = TRUE,
                    expected = defarray("R1", "R2", "R3"))

Params = Params + _(input = defarray("R1", "R2", "R3", "R-1", "R2", "A", "A",
                                     "R", "C"),
                    do_sort = TRUE,
                    expected = defarray("A", "C", "R", "R-1", "R1", "R2", "R3"))
Params = Params + _(input = defarray("R2", "R1", ""),
                    do_sort = TRUE,
                    expected = defarray("", "R1", "R2"))

function void test_struniq_wordering (const bundles P)
    print "Start testing function struniq() with ordering."

    loop foreach i P
        # Given
        strings expected = P[i].expected
        # When
        strings actual = struniq(P[i].input, P[i].do_sort)

        # Then
        assert(nelem(actual) == nelem(expected))
        loop foreach j expected
            assert(actual[j] == "$j")
        endloop
    endloop
end function
test_struniq_wordering(Params)



function void test_strrepl (void)
    print "Start with strrepl()"

    string str = "ABC DH7*!_"
    strings S = strrepl(str, 3)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "ABC DH7*!_")
    assert_equal_str(S[2], "ABC DH7*!_")
    assert_equal_str(S[3], "ABC DH7*!_")

    string str = ""
    strings S = strrepl(str, 3)
    assert_equal_num(nelem(S), 3)
end function


function void test_msortby_rowlabels (void)
    print "Start with msortby_rowlabels()"

    matrix M = mshape(seq(1,9), 3, 3)
    strings Snew = defarray("C", "A", "B")
    strings S = defarray("A", "B", "C")
    matrix m = msortby_rowlabels(M, Snew)
    assert_false(nelem(m))

    rnameset(M, S)
    matrix m = msortby_rowlabels(M, Snew)
    strings row_names = rnameget(m)
    assert_equal_num(nelem(row_names), 3)
    assert_equal_str(row_names[1], "C")
    assert_equal_str(row_names[2], "A")
    assert_equal_str(row_names[3], "B")

    assert_equal_num(sumr(m)[1], 15)
    assert_equal_num(sumr(m)[2], 18)
    assert_equal_num(sumr(m)[3], 12)

    strings Snew = defarray("C", "A", "B")
    strings S = defarray("A ", "B", "C")
    rnameset(M, S)
    matrix m = msortby_rowlabels(M, Snew)
    assert_false(nelem(m))

    strings Snew = defarray("C", "A", "D")
    strings S = defarray("A", "B", "C")
    rnameset(M, S)
    matrix m = msortby_rowlabels(M, Snew)
    assert_false(nelem(m))

    strings Snew = defarray("783jdikd_", "A", "B")
    strings S = defarray("A", "B", "783jdikd_")
    rnameset(M, S)
    matrix m = msortby_rowlabels(M, Snew)
    strings row_names = rnameget(m)
    assert_equal_num(nelem(row_names), 3)
    assert_equal_str(row_names[1], "783jdikd_")
    assert_equal_str(row_names[2], "A")
    assert_equal_str(row_names[3], "B")
    assert_equal_num(sumr(m)[1], 15)
    assert_equal_num(sumr(m)[2], 18)
    assert_equal_num(sumr(m)[3], 12)
end function

test_strsandwich()
test_strdrop()
test_strrepl()
test_msortby_rowlabels()



bundles Params = null
Params = Params + _(target = "ABCdev", prefix = "ABC", expected = TRUE)
Params = Params + _(target = "ABCdev", prefix = "ABD", expected = FALSE)
Params = Params + _(target = " ABCdev", prefix = " ABCdev", expected = TRUE)
Params = Params + _(target = " ABCdev", prefix = "ABCdev", expected = FALSE)
Params = Params + _(target = " A 37s!", prefix = " A 37s!", expected = TRUE)
Params = Params + _(target = "ABC", prefix = "ABCD!", expected = FALSE)
function void test_strstarts (const bundles P)
    print "Start testing strstarts()."

    loop foreach i P
        # Given + When
        matrix actual = strstarts(P[i].target, P[i].prefix)
        matrix expected = P[i].expected

        # Then
        assert(actual == expected)
    endloop
end function
test_strstarts(Params)


bundles Params = null
Params = Params + _(target = "ABCdev", suffix = "dev", expected = TRUE)
Params = Params + _(target = "ABCdev", suffix = "devABC", expected = FALSE)
Params = Params + _(target = "ABCdev", suffix = "ABDdev", expected = FALSE)
Params = Params + _(target = " ABCdev", suffix = " Cdev", expected = FALSE)
Params = Params + _(target = " ABCdev", suffix = "dev", expected = TRUE)
Params = Params + _(target = " A 37s!", suffix = "7s!", expected = TRUE)
Params = Params + _(target = "ABC", suffix = "ABC!", expected = FALSE)
function void test_strends (const bundles P)
    print "Start testing strends()."

    loop foreach i P
        # Given + When
        matrix actual = strends(P[i].target, P[i].suffix)
        matrix expected = P[i].expected

        # Then
        assert(actual == expected)
    endloop
end function
test_strends(Params)


bundles Params = null
Params = Params + _(input = "ABc", expected = "Abc")
Params = Params + _(input = " ABc", expected = " abc")
Params = Params + _(input = " ABc ", expected = " abc ")
Params = Params + _(input = "", expected = "")
Params = Params + _(input = " ", expected = " ")

function void test_capitalize (const bundles P)
    print "Start testing capitalize()."

    loop foreach i P
        # Given + When
        string actual = capitalize(P[i].input)
        string expected = P[i].expected

        # Then
        assert(actual == expected)
    endloop
end function
test_capitalize(Params)


bundles Params = null
Params = Params + _(input = "ABc", expected = "Abc")
Params = Params + _(input = " ABc", expected = "Abc")
Params = Params + _(input = " ABc ", expected = "Abc")
Params = Params + _(input = "", expected = "")
Params = Params + _(input = " ", expected = "")
Params = Params + _(input = "ABc dEf", expected = "Abc Def")
Params = Params + _(input = " ABc dEf ", expected = "Abc Def")
Params = Params + _(input = " ABc  dEf", expected = "Abc Def")
function void test_titlecase (const bundles P)
    print "Start testing titlecase()."

    loop foreach i P
        # Given + When
        string actual = titlecase(P[i].input)
        string expected = P[i].expected

        # Then
        assert(actual == expected)
    endloop
end function
test_titlecase(Params)


bundles Params = null
Params = Params + _(input = "ABc", expected = "Abc")
Params = Params + _(input = " ABc", expected = "Abc")
Params = Params + _(input = " ABc ", expected = "Abc")
Params = Params + _(input = "", expected = "")
Params = Params + _(input = " ", expected = "")
Params = Params + _(input = "ABc dEf", expected = "AbcDef")
Params = Params + _(input = " ABc dEf ", expected = "AbcDef")
Params = Params + _(input = " ABc  dEf", expected = "AbcDef")
function void test_camelcase (const bundles P)
    print "Start testing camelcase()."

    loop foreach i P
        # Given + When
        string actual = camelcase(P[i].input)
        string expected = P[i].expected

        # Then
        assert(actual == expected)
    endloop
end function
test_camelcase(Params)


bundles Params = null
Params = Params + _(input = "ABc", find = "A", expected = 1)
Params = Params + _(input = "ABc", find = "c", expected = 3)
Params = Params + _(input = "ABc", find = "a", expected = 0)
Params = Params + _(input = "ABc", find = "d", expected = 0)
Params = Params + _(input = "ABc", find = "", expected = 0)
Params = Params + _(input = "ABc", find = " ", expected = 0)
Params = Params + _(input = "ABc ", find = " ", expected = 4)
Params = Params + _(input = " ABc ", find = " ", expected = 1)
function void test_strfind (const bundles P)
    print "Start testing strfind()."

    loop foreach i P
        # Given + When
        scalar actual = strfind(P[i].input, P[i].find)
        scalar expected = P[i].expected

        # Then
        assert(actual == expected)
    endloop
end function
test_strfind(Params)



bundles Params = null
Params = Params + _(input = "", expected = "")
Params = Params + _(input = " ", expected = "")
Params = Params + _(input = "gretl Loves SNAKE caSe",\
                    expected = "gretl_loves_snake_case")
Params = Params + _(input = " gretl Loves SNAKE caSe",\
                    expected = "gretl_loves_snake_case")
Params = Params + _(input = " gretl Loves SNAKE caSe ",\
                    expected = "gretl_loves_snake_case")
Params = Params + _(input = " gretl      Loves SNAKE caSe ",\
                    expected = "gretl_loves_snake_case")
function void test_snakecase (const bundles P)
    print "Start testing snakecase()."

    loop foreach i P
        # Given + When
        string actual = snakecase(P[i].input)
        string expected = P[i].expected

        # Then
        assert(actual == expected)
    endloop
end function
test_snakecase(Params)


# TODO: Not yet implemented -- works only if "to_num = 1"
/*
   nulldata 4
   strings dates = defarray("2019-01-01", "2019-01-02", "20190103", "2019/01/02")
   series Date = time
   stringify(Date, dates)
   print Date -o

   series NumDate = replace_series_string_values(Date, "\W", "")		# '\W' replace all non-numeric chars
   print Date NumDate -o
*/




printf "\nInfo: All tests passed.\n"
