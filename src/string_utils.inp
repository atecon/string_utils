function string strflatten  (const strings S,
                             const string delimiter[null])
    /* Flatten string array to string. */

    if exists(delimiter) == 0
        delimiter = ","
    endif

    return regsub(flatten(S), "\n", delimiter)
end function


function strings strdrop (const strings S, const string pattern)
    /* Drop a specific string from string array. String may occur multiple times. */

    strings ret = array(0)

    if strlen(pattern) == 0
        return S
    elif nelem(S) == 0
        return ret
    else
        loop i=1..nelem(S) -q
            if S[i] != pattern
                ret += S[i]
            endif
        endloop
    endif

    return ret
end function


function matrix strpos (const strings S "Array of strings",
                        const string search_pattern "String being searched for in S",
                        const bool print_warning[1])
    /* Returns the positional entries of string in S in a column vector */

    matrix ret = {}

    loop i=1..nelem(S) -q
        if S[i] == search_pattern
            ret |= $i
        endif
    endloop

    return ret
end function


function strings struniq (const strings svalues)
/* Returns an array containing the distinct elements
    of S not sorted but in their order of appearance. */

    strings suniq = array(0)
    scalar error = 0

    if nelem(svalues) && strlen(svalues[1])
        strings suniq = defarray(svalues[1])

        loop i=2..nelem(svalues) -q
            if strlen(svalues[i]) == 0
                error++
                break
            endif
            if nelem( strpos(suniq, svalues[i], 0) ) == 0
                suniq += svalues[i]
            endif
        endloop

        if error
            #printf "\nWarning: At least one element in string array has length zero. Not allowed.\n"
            return array(0)
        endif
    endif

    return suniq
end function


function strings strrepl (const string str, const int n[1::])
    /* Construct string array holding a constant string n times. */

    strings S = array(n)
    loop i=1..n -q
        S[i] = str
    endloop

    return S
end function


function matrix msortby_rowlabels (const matrix X,
                                   strings rowlabels_new "String array to be re-ordered")
    /* Read out current string array of row-labels of matrix X. Re-order
       rows of X according to string array 'rowlabels_new'.

       The array 'rowlabels_new' must be of the same length as X has rows.
       All elements in 'rowlabels_new' must also be included in X' row
    names, otherwise a 1x1 zero-matrix is returned. */

    matrix ret = {}
    strings rnames = rnameget(X)

    if !nelem(rowlabels_new) || !nelem(rnames)
        return ret
    endif
    if (nelem(struniq(rowlabels_new)) != nelem(rowlabels_new))
        return ret
    endif
    if nelem(rowlabels_new) != rows(X)
        return ret
    endif

    matrix ret = zeros(rows(X), cols(X))
    loop i=1..nelem(rowlabels_new) -q
        if nelem(strpos(rnames, rowlabels_new[i], 0)) > 0
            scalar pos = strpos(rnames, rowlabels_new[i], 0)
            ret[pos,] = X[i,]
        else
            return {}
        endif
    endloop
    rnameset(ret, rowlabels_new)

    return ret
end function


function strings strsandwich (matrix x,
                              const string pre[null],
                              const string post[null])
    /* Construct a string array where to each numerical value of x
       a string prefix 'pre' and a suffix 'post' is concatenated.
    Proposed by Riccardo "Jack" Lucchetti. */

    matrix x = vec(x)
    scalar n = rows(x)
    strings ret = array(n)

    if !nelem(x)
        return ret
    endif
    if !exists(pre)
        pre = ""
    endif
    if !exists(post)
        post = ""
    endif

    loop i=1..n -q
        ret[i] = sprintf("%s%d%s", pre, x[i], post)
    endloop

    return ret
end function


function scalar strstarts (const string target "Text being searched",
                           const string pattern "Prefix to be searched")
    /* Check whether 'target' starts with the pattern 'pattern'.
    Return TRUE if 'target' starts with 'pattern', otherwise FALSE. */

    if nelem(target) < nelem(pattern)
       printf "\nWarning: 'pattern' cannot be longer than 'target'.\n"
       return FALSE
    endif

    string target_starts_with = substr(target, 1, nelem(pattern))

    if target_starts_with == pattern
        return TRUE
    else
        return FALSE
    endif
end function


function scalar strends (const string target "Text being searched",
                         const string pattern "Suffix to be searched")
    /* Check whether 'target' ends with the pattern 'pattern'.
    Return TRUE if 'target' ends with 'pattern', otherwise FALSE. */

    if nelem(target) < nelem(pattern)
       printf "\nWarning: 'pattern' cannot be longer than 'target'.\n"
       return FALSE
    endif

    scalar n_chars_target = nelem(target)
    scalar n_chars_pattern = nelem(pattern)
    scalar start = 1 + n_chars_target - n_chars_pattern
    scalar ende = n_chars_target
    string target_ends_with = substr(target, start, ende)

    if target_ends_with == pattern
        return TRUE
    else
        return FALSE
    endif
end function


function string capitalize (string input)
    /* Convert first letter to uppercase and other letters to lowercase.
    return: string, Capitalized */

    input = tolower(input)

    if nelem(input) == 0
        return input
    endif
    input = nelem(input) == 1 ? toupper(input[1]) : toupper(input[1]) ~ input[2:]

    return input
end function


function string camelcase (string input)
    /* The titlecase is a capitalization style used for titles so that the first
    letter of each word is uppercase and the remaining letters are lowercase.
    return: string, titlecase */

    return titlecase(input, FALSE)
end function


function string titlecase (const string input, const bool add_space[TRUE])
    /* The titlecase is a capitalization style used for titles so that the first
    letter of each word is uppercase and the remaining letters are lowercase.
    return: string, titlecase */

    strings Inputs = strsplit(input, " ")
    string ret

    loop foreach i Inputs
        ret += sprintf("%s", capitalize("$i"))
        if i < nelem(Inputs) && add_space == TRUE
            ret += " "
        endif
    endloop

    return ret
end function


function string snakecase (const string input)
    /* The snakecase is a style replacing spaces by underscores, and all letters
    to lowercase.
    return: string, Formatted in snakecase style */

    strings Inputs = strsplit(input, " ")
    string ret

    loop foreach i Inputs
        ret += sprintf("%s", tolower("$i"))
        if i < nelem(Inputs)
            ret += "_"
        endif
    endloop

    return ret
end function


function scalar strfind (const string search, const string find)
    /* Finds a substring in a string and returns the index of the substring.
    return: scalar, Position of the string. If 'find' is not found, return 0 value.
    Eventual spaces are not ignored. */

    if !nelem(search) || !nelem(find)
        print "Warning: Both the searched string and the find string must be at least of length one."
        return 0
    endif

    string match = strstr(search, find)
    scalar ret = 0

    if match != ""
        ret = 1 + strlen(search) - strlen(match)
    endif

    return ret
end function




# TODO: Not yet implemented -- works only if "to_num = 1"
/*
   function series replace_strval (const series s,
   const string search_pattern,
   const string repl_pattern,
   const bool to_num[1])
   #    Replace string values of a series, and optionally cast
   #    result to numerical value of possible.

   scalar T = nobs(s)
   series ret = NA

   if T == 0 || nelem(strvals(s)) == 0
   print "foo"
   return ret
   else

   if strlen(search_pattern) && strlen(repl_pattern)
   print "huhu"

   loop i=1..T -q
   string str = regsub(s[i], search_pattern, repl_pattern)
   if to_num
   catch series ret[i] = atof(str)
   else
   stop
   series ret[i] = str
   endif
   endloop
   endif

   return ret
   endif
   end function
*/


