function strings strdrop (const strings S, const string drop_str)
    /* Drop a specific string from string array. String may occur multiple times. */

    strings ret = array(0)

    if strlen(drop_str) == 0
        return S
    elif nelem(S) == 0
        return ret
    else
        loop i=1..nelem(S) -q
            if S[i] != drop_str
                ret += S[i]
            endif
        endloop
    endif

    return ret
end function


function matrix strpos (const strings S "Array of strings",
                        const string search_pattern "String being searched for in S")
    /* Returns the positional entries of string in S in a column vector */

    print "Gretl version 2020b includes the instrings() as a built-in alternative to strpos()"

    matrix ret = {}

    loop i=1..nelem(S) -q
        if S[i] == search_pattern
            ret |= $i
        endif
    endloop

    return ret
end function


function strings struniq (const strings S)
/* Returns an array containing the distinct elements
   of S not sorted but in their order of appearance. */

    strings suniq = array(0)
    scalar error = 0

    if nelem(S) && strlen(S[1])
        strings suniq = defarray(S[1])

        loop i=2..nelem(S) -q
            if strlen(S[i]) == 0
                error++
                break
            endif
            if nelem( strpos(suniq, S[i]) ) == 0
                suniq += S[i]
            endif
        endloop

        if error
            #printf "\nWarning: At least one element in string array has length zero. Not allowed.\n"
            return array(0)
        endif
    endif

    return suniq
end function


function strings strrepl (const string str, const int n[1::])
    /* Construct string array holding a constant string n times. */

    strings S = array(n)
    loop i=1..n -q
        S[i] = str
    endloop

    return S
end function


function matrix msortby_rowlabels (const matrix X,
                                   strings rowlabels_new "String array to be re-ordered")
    /* Read out current string array of row-labels of matrix X. Re-order
       rows of X according to string array 'rowlabels_new'.

       The array 'rowlabels_new' must be of the same length as X has rows.
       All elements in 'rowlabels_new' must also be included in X' row
    names, otherwise a 1x1 zero-matrix is returned. */

    matrix ret = {}
    strings rnames = rnameget(X)

    if !nelem(rowlabels_new) || !nelem(rnames)
        return ret
    endif
    if (nelem(struniq(rowlabels_new)) != nelem(rowlabels_new))
        return ret
    endif
    if nelem(rowlabels_new) != rows(X)
        return ret
    endif

    matrix ret = zeros(rows(X), cols(X))
    loop i=1..nelem(rowlabels_new) -q
        if nelem(strpos(rnames, rowlabels_new[i])) > 0
            scalar pos = strpos(rnames, rowlabels_new[i])
            ret[pos,] = X[i,]
        else
            return {}
        endif
    endloop
    rnameset(ret, rowlabels_new)

    return ret
end function


function strings strsandwich (matrix x,
                              const string pre[null],
                              const string post[null])
    /* Construct a string array where to each numerical value of x
       a string prefix 'pre' and a suffix 'post' is concatenated.
    Proposed by Riccardo "Jack" Lucchetti. */

    matrix x = vec(x)
    scalar n = rows(x)
    strings ret = array(n)

    if !nelem(x)
        return ret
    endif
    if !exists(pre)
        pre = ""
    endif
    if !exists(post)
        post = ""
    endif

    loop i=1..n -q
        ret[i] = sprintf("%s%d%s", pre, x[i], post)
    endloop

    return ret
end function


# TODO: Not yet implemented -- works only if "to_num = 1"
/*
   function series replace_strval (const series s,
   const string search_pattern,
   const string repl_pattern,
   const bool to_num[1])
   #    Replace string values of a series, and optionally cast
   #    result to numerical value of possible.

   scalar T = nobs(s)
   series ret = NA

   if T == 0 || nelem(strvals(s)) == 0
   print "foo"
   return ret
   else

   if strlen(search_pattern) && strlen(repl_pattern)
   print "huhu"

   loop i=1..T -q
   string str = regsub(s[i], search_pattern, repl_pattern)
   if to_num
   catch series ret[i] = atof(str)
   else
   stop
   series ret[i] = str
   endif
   endloop
   endif

   return ret
   endif
   end function
*/


