<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="string_utils" no-data-ok="true" minver="2018a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.3</version>
<date>2020-12-11</date>
<description>Helper functions for string operations</description>
<tags>C81</tags>
<help>
This package is a collection of helper functions for various operations of string variables and string arrays which are not covered by gretl's built-in methods (yet).

Please ask questions and report bugs on the gretl mailing list if possible. Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/string_utils



Public functions:
-----------------

strflatten():
Flatten an array of strings to a string separated by some delimiter.
----------
Arguments:
S           - string array, Input string array
delimiter   - string, Delimiter (optional, default: &quot;,&quot;)

Return:
String value separating each array item by some delimiter.


strdrop():
Drop a specific string 'drop_str' from string array 'S'. String 'drop_str' may occur multiple times.
----------
Arguments:
S           - string array, Input
drop_str    - string, Pattern of string value to be dropped from S

Return:
Return string array excluding string 'drop_str' if present in S. If 'drop_str' is not present, the original array 'S' is returned instead. If string array 'S' has length zero, an empty array is returned.


struniq():
Get the unique string values of string array S.
----------
Arguments:
S           - string array

Return:
Array containing the distinct elements of array S not sorted but in their order of appearance. If string array 'S' has length zero or at least one string element is of length zero, an empty string array is returned.


strrepl():
Copy string n-times into a string array of length n.
----------
Arguments:
str         - string
n           - int

Return:
Array containing string 'str' n-times. Also works for an empty string 'str'.


strsandwich():
Construct a string array. To each numerical value of x concatenate a string prefix 'pre' and a suffix 'post'.
----------
Arguments:
x           - matrix
pre         - string, optional
post        - string, optional

Return:
Array of length n=rows(vec(x)). Each string is a combination of the prefix 'pre', the i-th numerical value of x and the suffix 'post'.


msortby_rowlabels():
Sort rows of matrix X by re-ordering row-labels of X by string array 'rowlabels_new'.
----------
Arguments:
X               - matrix, must include row-labels set by rnameset()
rowlabels_new   - string array, re-order X' row-labels by this string

Return:
Matrix with sorted rows of X by 'rowlabels_new'. X must have row-labels. Also all elements in 'rowlabels_new' must be present in X' row-labels too, otherwise an empty matrix is returned (can be checked by &lt;nelem(matrix)&gt;).



Changelog:
- 0.3, December 2020:
    + Add new strflatten() function
    + Remove deprecated function strpos() as reported in version 0.21 - this
      function is superseded by gretl's built-in function instrings() which is
      available since gretl 2020a
- 0.21, Januar 2020:
    + strpos() function also accepts and searches for empty string
      (length zero) in array S.
    + drop unnecessary checks in strpos()
    + add new function strsandwich()
- 0.2, December 2019:
    + add new function strprog()
- 0.1, December 2019:
    + initial release
</help>
<gretl-function name="strflatten" type="string">
 <params count="2">
  <param name="S" type="strings" const="true"/>
  <param name="delimiter" type="string" optional="true" const="true"/>
 </params>
<code>/* Flatten string array to string. */
if exists(delimiter) == FALSE
  delimiter = &quot;,&quot;
endif
string new_string
loop foreach i S
  new_string += sprintf(&quot;%s&quot;, &quot;$i&quot;)
  if i &lt; nelem(S)
    new_string += sprintf(&quot;%s&quot;, delimiter)
  endif
endloop
return new_string
</code>
</gretl-function>
<gretl-function name="strdrop" type="strings">
 <params count="2">
  <param name="S" type="strings" const="true"/>
  <param name="drop_str" type="string" const="true"/>
 </params>
<code>/* Drop a specific string from string array. String may occur multiple times. */
strings ret = array(0)
if strlen(drop_str) == 0
  return S
elif nelem(S) == 0
  return ret
else
  loop i=1..nelem(S) -q
    if S[i] != drop_str
      ret += S[i]
    endif
  endloop
endif
return ret
</code>
</gretl-function>
<gretl-function name="strpos" type="matrix">
 <params count="3">
  <param name="S" type="strings" const="true">
<description>Array of strings</description>
  </param>
  <param name="search_pattern" type="string" const="true">
<description>String being searched for in S</description>
  </param>
  <param name="print_warning" type="bool" default="1" const="true"/>
 </params>
<code>/* Returns the positional entries of string in S in a column vector */
matrix ret = {}
loop i=1..nelem(S) -q
  if S[i] == search_pattern
    ret |= $i
  endif
endloop
return ret
</code>
</gretl-function>
<gretl-function name="struniq" type="strings">
 <params count="1">
  <param name="S" type="strings" const="true"/>
 </params>
<code>/* Returns an array containing the distinct elements
of S not sorted but in their order of appearance. */
strings suniq = array(0)
scalar error = 0
if nelem(S) &amp;&amp; strlen(S[1])
  strings suniq = defarray(S[1])
  loop i=2..nelem(S) -q
    if strlen(S[i]) == 0
      error++
      break
    endif
    if nelem( strpos(suniq, S[i], 0) ) == 0
      suniq += S[i]
    endif
  endloop
  if error
    #printf &quot;\nWarning: At least one element in string array has length zero. Not allowed.\n&quot;
    return array(0)
  endif
endif
return suniq
</code>
</gretl-function>
<gretl-function name="strrepl" type="strings">
 <params count="2">
  <param name="str" type="string" const="true"/>
  <param name="n" type="int" min="1" const="true"/>
 </params>
<code>/* Construct string array holding a constant string n times. */
strings S = array(n)
loop i=1..n -q
  S[i] = str
endloop
return S
</code>
</gretl-function>
<gretl-function name="msortby_rowlabels" type="matrix">
 <params count="2">
  <param name="X" type="matrix" const="true"/>
  <param name="rowlabels_new" type="strings">
<description>String array to be re-ordered</description>
  </param>
 </params>
<code>/* Read out current string array of row-labels of matrix X. Re-order
rows of X according to string array 'rowlabels_new'.
The array 'rowlabels_new' must be of the same length as X has rows.
All elements in 'rowlabels_new' must also be included in X' row
names, otherwise a 1x1 zero-matrix is returned. */
matrix ret = {}
strings rnames = rnameget(X)
if !nelem(rowlabels_new) || !nelem(rnames)
  return ret
endif
if (nelem(struniq(rowlabels_new)) != nelem(rowlabels_new))
  return ret
endif
if nelem(rowlabels_new) != rows(X)
  return ret
endif
matrix ret = zeros(rows(X), cols(X))
loop i=1..nelem(rowlabels_new) -q
  if nelem(strpos(rnames, rowlabels_new[i], 0)) &gt; 0
    scalar pos = strpos(rnames, rowlabels_new[i], 0)
    ret[pos,] = X[i,]
  else
    return {}
  endif
endloop
rnameset(ret, rowlabels_new)
return ret
</code>
</gretl-function>
<gretl-function name="strsandwich" type="strings">
 <params count="3">
  <param name="x" type="matrix"/>
  <param name="pre" type="string" optional="true" const="true"/>
  <param name="post" type="string" optional="true" const="true"/>
 </params>
<code>/* Construct a string array where to each numerical value of x
a string prefix 'pre' and a suffix 'post' is concatenated.
Proposed by Riccardo &quot;Jack&quot; Lucchetti. */
matrix x = vec(x)
scalar n = rows(x)
strings ret = array(n)
if !nelem(x)
  return ret
endif
if !exists(pre)
  pre = &quot;&quot;
endif
if !exists(post)
  post = &quot;&quot;
endif
loop i=1..n -q
  ret[i] = sprintf(&quot;%s%d%s&quot;, pre, x[i], post)
endloop
return ret
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include string_utils.gfn


strings S = defarray(&quot;A&quot;, &quot;B&quot;)
string drop = &quot;B&quot;
eval strdrop(S, drop)

strings S = defarray(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;B&quot;)
string search = &quot;B&quot;
eval strpos(S, search)

strings S = defarray(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;B&quot;)
eval struniq(S)

string str = &quot;AB&quot;
eval strrepl(str, 3)

matrix m = mshape(seq(1,4),2,2)
rnameset(m, &quot;R1 R2&quot;)
strings rnames_new = defarray(&quot;R2&quot;, &quot;R1&quot;)
eval msortby_rowlabels(m, rnames_new)

eval strsandwich(seq(2,4), &quot;beta_&quot;)
eval strsandwich(seq(1,2), &quot;a[&quot; , &quot;]&quot;)

strings S1 = defarray(&quot;A&quot;, &quot;B&quot;)
strings S2 = defarray(&quot;A&quot;, &quot;B&quot;, &quot;; &quot;)
eval strflatten(S1)
eval strflatten(S2)
</sample-script>
</gretl-function-package>
</gretl-functions>
