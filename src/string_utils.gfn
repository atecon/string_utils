<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="string_utils" no-data-ok="true" minver="2018a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.1</version>
<date>2019-12-16</date>
<description>Helper functions for string operations</description>
<tags>C81</tags>
<help>
Help text for the string_utils.gfn package by Artur Tarassow.

Email: atecon@posteo.de (please ask questions and report bugs on the gretl mailing list if possible).

Source code and tests: https://github.com/atecon/string_utils


This package is a collection of helper functions for various operations of string variables and string arrays which are not covered by gretl's built-in methods (yet).


Public functions:
-----------------

strdrop():
Drop a specific string 'drop_str' from string array 'S'. String 'drop_str' may occur multiple times.
----------
Arguments:
S 		 - string array
drop_str - string, pattern of string value to be droppped from S

Return:
Return string array excluding string 'drop_str' if present in S. Of 'drop_str' is not present, the original array 'S' is returned. If string array 'S' or string 'search_pattern' are not valid, an empty string array is returned.


strpos():
Determine the positions of a string in string array S.
----------
Arguments:
S 				- string array
search_pattern	- string, pattern of string entry to be searched in S

Return:
Returns the positional entr(y)ies of string 'search_patter' in a column vector if present in string array 'S', 1x1 zero-matrix otherwise. If string array 'S' or string 'search_pattern' are not valid, a 1x1 zero-matrix is returned.


struniq():
Get the unique string values of string array S.
----------
Arguments:
S 		- string array

Return:
Array containing the distinct elements of array S not sorted but in their order of appearance. If string array 'S' is not valid, an empty array is returned.


strrepl():
Copy string n-times into a string array of length n.
----------
Arguments:
str		- string
n 	 	- int

Return:
Array containing string 'str' n-times. If string is not valid, an empty array is returned.


msortby_rowlabels():
Sort rows of matrix X by re-ordering row-labels of X by string array 'rowlabels_new'. 
----------
Arguments:
X 				- matrix, must include row-labels set by rnameset()
rowlabels_new	- string array, re-order X' row-labels by this string

Return:
Matrix with sorted rows of X by 'rowlabels_new'. X must have row-labels. Also all elements in 'rowlabels_new' must be present in X' row-labels too, otherwise a 1x1 zero-matrix is returned.


valid_string():
Checks length of a string.
----------
Arguments:
s 		- string, variable being checked

Return:
If 's' is at least of length 1 return scalar of 1, otherwise 0.


valid_strarray():
Checks length of a string array.
----------
Arguments:
S 		- string array, variable being checked

Return:
If 'S' is at least of length 1 return scalar of 1, otherwise 0.


Changelog:
- 0.1, December 2019:
    initial release
</help>
<gretl-function name="valid_string" type="scalar">
 <params count="1">
  <param name="S" type="string" const="true"/>
 </params>
<code>/* Check length of string*/
if strlen(S) == 0
  return 0
else
  return 1
endif
</code>
</gretl-function>
<gretl-function name="valid_strarray" type="scalar">
 <params count="1">
  <param name="S" type="strings" const="true"/>
 </params>
<code>/* Check length of string array. */
if nelem(S) == 0
  return 0
else
  return 1
endif
</code>
</gretl-function>
<gretl-function name="strdrop" type="strings">
 <params count="2">
  <param name="S" type="strings" const="true"/>
  <param name="drop_str" type="string" const="true"/>
 </params>
<code>/* Drop a specific string from string array. String may occur multiple times. */
strings ret = array(0)
if valid_string(drop_str) &amp;&amp; valid_strarray(S)
  loop i=1..nelem(S) -q
    if S[i] != drop_str
      ret += S[i]
    endif
  endloop
else
  return S
endif
return ret
</code>
</gretl-function>
<gretl-function name="strpos" type="matrix">
 <params count="2">
  <param name="S" type="strings" const="true">
<description>Array of strings</description>
  </param>
  <param name="search_pattern" type="string" const="true">
<description>String being searched for in S</description>
  </param>
 </params>
<code># Returns the positional entries of string in S in a column vector
# if S contains string, 0 otherwise.
matrix ret = {}
if valid_string(search_pattern) &amp;&amp; valid_strarray(S)
  loop i=1..nelem(S) -q
    if S[i] == search_pattern
      ret |= $i
    endif
  endloop
  if rows(ret) &gt; 0
    return ret
  else
    return {0}
  endif
else
  return {0}
endif
</code>
</gretl-function>
<gretl-function name="struniq" type="strings">
 <params count="1">
  <param name="S" type="strings" const="true"/>
 </params>
<code>/* Returns an array containing the distinct elements
of S not sorted but in their order of appearance. */
strings suniq = array(0)
if valid_strarray(S)
  strings suniq = defarray(S[1])
  loop i=2..nelem(S) -q
    if strpos(suniq, S[i]) == 0		# TODO: What about empty strings?
      suniq += S[i]
    endif
  endloop
endif
return suniq
</code>
</gretl-function>
<gretl-function name="strrepl" type="strings">
 <params count="2">
  <param name="str" type="string" const="true"/>
  <param name="times" type="int" min="1" const="true"/>
 </params>
<code>/* Construct string array holding a constant string
n times. May be needed for constructing a series with a constant
string value by means of stringify(). */
strings S = array(0)
if valid_string(str)
  strings S = array(times)
  loop i=1..times -q
    S[i] = str
  endloop
endif
return S
</code>
</gretl-function>
<gretl-function name="msortby_rowlabels" type="matrix">
 <params count="2">
  <param name="X" type="matrix" const="true"/>
  <param name="rowlabels_new" type="strings">
<description>String array to be re-ordered</description>
  </param>
 </params>
<code>/* Read out current string array of row-labels of matrix X. Re-order
rows of X according to string array 'rowlabels_new'.
The array 'rowlabels_new' must be of the same length as X has rows.
All elements in 'rowlabels_new' must also be included in X' row
names, otherwise a 1x1 zero-matrix is returned. */
matrix ret = {0}
strings rnames = rnameget(X)
if !valid_strarray(rowlabels_new) || !valid_strarray(rnames)
  return ret
endif
if (nelem(struniq(rowlabels_new)) != nelem(rowlabels_new))
  return ret
endif
if nelem(rowlabels_new) != rows(X)
  return ret
endif
matrix ret = zeros(rows(X),cols(X))
loop i=1..nelem(rowlabels_new) -q
  scalar pos = strpos(rnames, rowlabels_new[i])
  if pos != 0
    ret[pos,] = X[i,]
  else
    return {0}
  endif
endloop
rnameset(ret, rowlabels_new)
return ret
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include string_utils.gfn


string str = &quot;hello world&quot;
eval valid_string(str)

strings S = defarray(&quot;A&quot;, &quot;B&quot;)
eval valid_strarray(S)

strings S = defarray(&quot;A&quot;, &quot;B&quot;)
string drop = &quot;B&quot;
eval strdrop(S, drop)

strings S = defarray(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;B&quot;)
string search = &quot;B&quot;
eval strpos(S, search)

strings S = defarray(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;B&quot;)
eval struniq(S)

string str = &quot;AB&quot;
eval strrepl(str, 3)

matrix m = mshape(seq(1,4),2,2)
rnameset(m, &quot;R1 R2&quot;)
strings rnames_new = defarray(&quot;R2&quot;, &quot;R1&quot;)
eval msortby_rowlabels(m, rnames_new)
</sample-script>
</gretl-function-package>
</gretl-functions>
