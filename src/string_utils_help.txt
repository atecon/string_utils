This package is a collection of helper functions for various operations of
string variables and string arrays which are not covered by gretl's built-in
methods (yet).

Please ask questions and report bugs on the gretl mailing list if possible.
Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/string_utils



Public functions:
-----------------

camelcase(string input):
========================
Camel-case is a capitalization of the first letter (and the remaining letters
are lowercase) before concatenating each of the space-separated words to a
single word. Words of the 'input' variable are expected to be separated by space.
Eventual spaces at the beginning or end of the string are removed before return.
----------
Arguments:
input   - string, Input string

Return:
String in camel-case format.


capitalize(string input):
=========================
Convert first letter of a string to uppercase and other letters to lowercase.
Eventual spaces will not be removed before return.
----------
Arguments:
input   - string, String to be capitalized

Return:
Returns capitalized string.


find(const string search, const string find):
=============================================
Finds a substring in a string and returns the index of the substring. Eventual
spaces are not ignored. If 'find' exists multiple times, the position of its first
occurrence is returned.
----------
Arguments:
search   - string, String to be searched
find     - string, String to find

Return:
Position of the 'find' string within the search string. In case, 'find' is not
found in the 'search string, the scalar value 0 is returned.


msortby_rowlabels(const matrix X, const strings rowlabels_new):
===============================================================
Sort rows of matrix X by re-ordering row-labels of X by string array
'rowlabels_new'.
----------
Arguments:
X               - matrix, must include row-labels
rowlabels_new   - string array, re-order X' row-labels by this string

Return:
Matrix with sorted rows of X by 'rowlabels_new'. X must have row-labels.
Also all elements in 'rowlabels_new' must be present in X' row-labels too,
otherwise an empty matrix is returned (can be checked by <nelem(matrix)>).


snakecase(string input):
========================
The snakecase is a style replacing spaces by underscores, and transforming all
letters to lowercase. Words of the 'input' variable are expected to be separated
by space. Eventual spaces at the beginning or end of the string are removed
before return.
----------
Arguments:
input   - string, Input string

Return:
String in snake-case format.


strdrop(strings S, string pattern):
===================================
Drop a specific string pattern from string array 'S'. String 'pattern'
may occur multiple times.
----------
Arguments:
S           - string array, Input
pattern     - string, Pattern of string value to be dropped from S

Return:
Return string array excluding string 'pattern' if present in S. If 'drop_str'
is not present, the original array 'S' is returned instead. If string
array 'S' has length zero, an empty array is returned.


strflatten(string S, const string delimiter[null]):
===================================================
Flatten an array of strings to a string separated by some delimiter.
----------
Arguments:
S           - string array, Input string array
delimiter   - string, Delimiter (optional, default: ",")

Return:
String value separating each array item by some delimiter.
NOTE: For simply flattening a string array, use the built-in gretl
function flatten which holds the strings in S, arranged one per line
by default.


strrepl(const string S, const int n[1::]):
==========================================
Copy string n-times into a string array of length n.
----------
Arguments:
S           - string, String to be repeated 'n' times
n           - int, Number of times to repeat 'S'

Return:
Array containing string 'S' n-times. Also works for an empty string 'S'.


strsandwich(matrix x, const string prefix[null], const string suffix[null]):
=======================================================================
Construct a string array. To each numerical value of "x", concatenate a
string prefix and a suffix.
----------
Arguments:
x           - matrix, holding numerical values
pre         - string, prefix to add (optional, default = "")
post        - string, suffix to add (optional, default = "")

Return:
Array of length n=rows(vec(x)). Each string is a combination of the
prefix, the i-th numerical value of "x" and the suffix.


strstarts(const string target, const string pattern):
====================================================
Check whether 'target' starts with 'pattern'.
----------
Arguments:
target      - string, String being searched
pattern     - string, Pattern to search for

Return:
TRUE if 'target' starts with 'pattern', otherwise FALSE.


strends(const string target, const string pattern):
==================================================
Check whether 'target' ends with 'pattern'.
----------
Arguments:
target      - string, String being searched
pattern     - string, Pattern to search for

Return:
TRUE if 'target' ends with 'pattern', otherwise FALSE.


struniq(const strings S):
=========================
Get the unique string values of string array S.
----------
Arguments:
S           - string array, Array to process

Return:
Array containing the distinct elements of array S not sorted but in their
order of appearance. If string array 'S' has length zero or at least one
string element is of length zero, an empty string array is returned.


titlecase(string input):
========================
The titlecase is a capitalization style used for titles so that the first letter
of each word is uppercase and the remaining letters are lowercase. Words are
expected to be separated by space. Space at the beginning or end of the string
are removed.
----------
Arguments:
input   - string, Input string

Return:
"titlelized" string.


Changelog:
- 0.5, April 2022:
    + Add new functions capitalize(), camelcase(), snakecase(), titlecase() and find()
- 0.4, January 2021:
    + Add new functions strstarts() and strends()
    + Change minimum version required from 2019c to 2020b.
- 0.3, December 2020:
    + Add new strflatten() function
    + Remove deprecated function strpos() as reported in version 0.21 - this
      function is superseded by gretl's built-in function instrings()
      which is available since gretl 2020a
    + Change minimum version required from 2018a to 2019c.
- 0.21, Januar 2020:
    + strpos() function also accepts and searches for empty string
      (length zero) in array S.
    + drop unnecessary checks in strpos()
    + add new function strsandwich()
- 0.2, December 2019:
    + add new function strprog()
- 0.1, December 2019:
    + initial release
